/*
by Jakub Wawak
kubawawak@gmail.com
all rights reserved
 */
package com.jakubwawak.gui;

import com.jakubwawak.database.Database;
import com.jakubwawak.database.Database_Garbage_Collector;
import com.jakubwawak.database.Database_List;
import com.jakubwawak.database.Database_Scene;
import com.jakubwawak.database.Database_Viewer;
import com.jakubwawak.gui.UI_Interface;
import com.jakubwawak.tick2.MailSender;
import com.jakubwawak.tick2.Options;
import com.jakubwawak.tick2.Tick_List;
import com.jakubwawak.tick2.Tick_Scene;
import com.jakubwawak.tick2.Tick_Tick;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;
import javax.swing.ImageIcon;

/**
 *Main GUI window of the program
 * @author jakubwawak
 */
public class GUI_main_window extends javax.swing.JFrame {

    public Database database;
    public Options options;
    GUI_Window_Manager window_manager;
    public int actual_panel_index;     // index of a tabbed panel
    public int TICK_list_selectedvalue; // index of an element in list
    public int LIST_listlist_selectedvalue;
    public int LIST_listtick_selectedvalue;
    public int LIST_listitems_selectedvalue;
    public int SCENES_list_selectedvalue;
    public int SCENES_listtick_selectedvalue;
    public String actual_choosen_element_string;
    UI_Interface ui;

    /**
     * Creates new form GUI_main_window
     */
    public GUI_main_window(Database database) throws SQLException {
        this.database = database;
        options = new Options(database);
        window_manager = new GUI_Window_Manager(this);
        TICK_list_selectedvalue = -1;
        LIST_listlist_selectedvalue = -1;
        LIST_listitems_selectedvalue = -1;
        SCENES_list_selectedvalue = -1;
        actual_panel_index = 0;
        ui = new UI_Interface();
        
        initComponents();
        
        options.run();
        
        Tick_LABEL_tick_version.setText(database.program_version+"("+database.program_build+")");
        window_manager.reload_default_scene_tick();
        load_window_icon();
        setLocationRelativeTo(null);
        setVisible(true);
    }
    
     /**
     * Function for loading window icon
     */
    void load_window_icon(){
        try{
            ImageIcon img = new ImageIcon("icon.png");
            this.setIconImage(img.getImage());
        }catch(Exception e){
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbed_panel = new javax.swing.JTabbedPane();
        tick_panel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TICK_list_ticklist = new javax.swing.JList<>();
        TICK_button_addnewtick = new javax.swing.JButton();
        TICK_button_active_ticks = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TICK_textarea_tickdetails = new javax.swing.JTextArea();
        TICK_button_edittick = new javax.swing.JButton();
        TICK_button_sharetick = new javax.swing.JButton();
        TICK_button_toclipboard = new javax.swing.JButton();
        TICK_button_markdone = new javax.swing.JButton();
        TICK_button_unarchive = new javax.swing.JButton();
        TICK_button_delete = new javax.swing.JButton();
        TICK_combobox_filter = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        list_panel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        LIST_listlist = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        LIST_listitems = new javax.swing.JList<>();
        LIST_label_info1 = new javax.swing.JLabel();
        LIST_label_info2 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        LIST_listtick = new javax.swing.JList<>();
        LIST_button_addticktolist = new javax.swing.JButton();
        LIST_button_edit = new javax.swing.JButton();
        LIST_button_copycontent = new javax.swing.JButton();
        LIST_button_deletelist = new javax.swing.JButton();
        LIST_button_addnewlist = new javax.swing.JButton();
        LIST_button_deleteticklist = new javax.swing.JButton();
        LIST_button_sendasemail = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        LIST_textarea_listdet = new javax.swing.JTextArea();
        LIST_textfield_listname = new javax.swing.JTextField();
        scenes_panel = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        SCENES_listscenes = new javax.swing.JList<>();
        SCENES_label_info1 = new javax.swing.JLabel();
        SCENES_button_createnewscene = new javax.swing.JButton();
        SCENES_button_editscene = new javax.swing.JButton();
        SCENES_label_info2 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        SCENES_textarea_scenedata = new javax.swing.JTextArea();
        SCENES_label_info3 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        SCENES_listtick = new javax.swing.JList<>();
        SCENES_button_deletescene = new javax.swing.JButton();
        Tick_LABEL_tick_version = new javax.swing.JLabel();
        button_options = new javax.swing.JButton();
        button_manageresources = new javax.swing.JButton();
        button_console = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tick2");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tabbed_panel.setToolTipText("Tick GUI");
        tabbed_panel.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbed_panelStateChanged(evt);
            }
        });

        TICK_list_ticklist.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        TICK_list_ticklist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TICK_list_ticklistMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TICK_list_ticklist);

        TICK_button_addnewtick.setText("Add new tick");
        TICK_button_addnewtick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TICK_button_addnewtickActionPerformed(evt);
            }
        });

        TICK_button_active_ticks.setText("Active Ticks");
        TICK_button_active_ticks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TICK_button_active_ticksActionPerformed(evt);
            }
        });

        TICK_textarea_tickdetails.setColumns(20);
        TICK_textarea_tickdetails.setRows(5);
        jScrollPane2.setViewportView(TICK_textarea_tickdetails);

        TICK_button_edittick.setText("Edit Tick");
        TICK_button_edittick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TICK_button_edittickActionPerformed(evt);
            }
        });

        TICK_button_sharetick.setText("Share Tick");
        TICK_button_sharetick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TICK_button_sharetickActionPerformed(evt);
            }
        });

        TICK_button_toclipboard.setText("To Clipboard");
        TICK_button_toclipboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TICK_button_toclipboardActionPerformed(evt);
            }
        });

        TICK_button_markdone.setText("Mark done");
        TICK_button_markdone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TICK_button_markdoneActionPerformed(evt);
            }
        });

        TICK_button_unarchive.setText("Unarchive");

        TICK_button_delete.setBackground(new java.awt.Color(255, 0, 51));
        TICK_button_delete.setText("Delete");
        TICK_button_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TICK_button_deleteActionPerformed(evt);
            }
        });

        TICK_combobox_filter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("Filter:");

        javax.swing.GroupLayout tick_panelLayout = new javax.swing.GroupLayout(tick_panel);
        tick_panel.setLayout(tick_panelLayout);
        tick_panelLayout.setHorizontalGroup(
            tick_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tick_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tick_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(TICK_button_markdone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TICK_button_active_ticks, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
                .addGap(59, 59, 59)
                .addGroup(tick_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(tick_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(tick_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tick_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
                                .addComponent(TICK_button_edittick, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(TICK_button_sharetick, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(TICK_button_addnewtick, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(TICK_button_unarchive, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(TICK_button_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tick_panelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TICK_combobox_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addComponent(TICK_button_toclipboard)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tick_panelLayout.setVerticalGroup(
            tick_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tick_panelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(tick_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TICK_button_active_ticks)
                    .addComponent(TICK_button_toclipboard)
                    .addComponent(TICK_combobox_filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tick_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tick_panelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TICK_button_markdone, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tick_panelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TICK_button_addnewtick)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TICK_button_sharetick)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TICK_button_edittick)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TICK_button_unarchive)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TICK_button_delete)))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        tabbed_panel.addTab("Tick", tick_panel);

        LIST_listlist.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        LIST_listlist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LIST_listlistMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(LIST_listlist);

        LIST_listitems.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        LIST_listitems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LIST_listitemsMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(LIST_listitems);

        LIST_label_info1.setText("Lists");

        LIST_label_info2.setText("List items");

        LIST_listtick.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        LIST_listtick.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LIST_listtickMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(LIST_listtick);

        LIST_button_addticktolist.setText("^");
        LIST_button_addticktolist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LIST_button_addticktolistActionPerformed(evt);
            }
        });

        LIST_button_edit.setText("Edit");
        LIST_button_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LIST_button_editActionPerformed(evt);
            }
        });

        LIST_button_copycontent.setText("Copy content");
        LIST_button_copycontent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LIST_button_copycontentActionPerformed(evt);
            }
        });

        LIST_button_deletelist.setText("Delete List");
        LIST_button_deletelist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LIST_button_deletelistActionPerformed(evt);
            }
        });

        LIST_button_addnewlist.setText("Add new list");
        LIST_button_addnewlist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LIST_button_addnewlistActionPerformed(evt);
            }
        });

        LIST_button_deleteticklist.setText("X");
        LIST_button_deleteticklist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LIST_button_deleteticklistActionPerformed(evt);
            }
        });

        LIST_button_sendasemail.setText("Send as e-mail");
        LIST_button_sendasemail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LIST_button_sendasemailActionPerformed(evt);
            }
        });

        LIST_textarea_listdet.setColumns(20);
        LIST_textarea_listdet.setRows(5);
        jScrollPane6.setViewportView(LIST_textarea_listdet);

        LIST_textfield_listname.setText("Enter the name");

        javax.swing.GroupLayout list_panelLayout = new javax.swing.GroupLayout(list_panel);
        list_panel.setLayout(list_panelLayout);
        list_panelLayout.setHorizontalGroup(
            list_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(list_panelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(list_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(LIST_label_info1)
                    .addComponent(LIST_button_addnewlist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LIST_button_copycontent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LIST_button_sendasemail, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                    .addComponent(LIST_textfield_listname))
                .addGap(18, 18, 18)
                .addGroup(list_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(list_panelLayout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(LIST_label_info2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, list_panelLayout.createSequentialGroup()
                        .addComponent(LIST_button_addticktolist, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(LIST_button_deleteticklist, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(list_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LIST_button_deletelist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LIST_button_edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE))
                .addContainerGap())
        );
        list_panelLayout.setVerticalGroup(
            list_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(list_panelLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(list_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LIST_label_info1)
                    .addComponent(LIST_label_info2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(list_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(list_panelLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(LIST_textfield_listname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(LIST_button_addnewlist)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(LIST_button_copycontent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(LIST_button_sendasemail))
                    .addGroup(list_panelLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(list_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LIST_button_addticktolist)
                            .addComponent(LIST_button_deleteticklist))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(list_panelLayout.createSequentialGroup()
                        .addComponent(LIST_button_edit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LIST_button_deletelist)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6)))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        tabbed_panel.addTab("List", list_panel);

        SCENES_listscenes.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        SCENES_listscenes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SCENES_listscenesMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(SCENES_listscenes);

        SCENES_label_info1.setText("Scenes");

        SCENES_button_createnewscene.setText("Create new scene");
        SCENES_button_createnewscene.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SCENES_button_createnewsceneActionPerformed(evt);
            }
        });

        SCENES_button_editscene.setText("Edit scene");
        SCENES_button_editscene.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SCENES_button_editsceneActionPerformed(evt);
            }
        });

        SCENES_label_info2.setText("Scene data:");

        SCENES_textarea_scenedata.setColumns(20);
        SCENES_textarea_scenedata.setRows(5);
        jScrollPane8.setViewportView(SCENES_textarea_scenedata);

        SCENES_label_info3.setText("Ticks in scene:");

        SCENES_listtick.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane9.setViewportView(SCENES_listtick);

        SCENES_button_deletescene.setText("Delete scene");
        SCENES_button_deletescene.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SCENES_button_deletesceneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout scenes_panelLayout = new javax.swing.GroupLayout(scenes_panel);
        scenes_panel.setLayout(scenes_panelLayout);
        scenes_panelLayout.setHorizontalGroup(
            scenes_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scenes_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scenes_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(SCENES_button_deletescene, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SCENES_label_info1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SCENES_button_createnewscene, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                    .addComponent(SCENES_button_editscene, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(65, 65, 65)
                .addGroup(scenes_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
                    .addGroup(scenes_panelLayout.createSequentialGroup()
                        .addGroup(scenes_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SCENES_label_info2)
                            .addComponent(SCENES_label_info3))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane9))
                .addContainerGap())
        );
        scenes_panelLayout.setVerticalGroup(
            scenes_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scenes_panelLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(SCENES_label_info1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scenes_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(scenes_panelLayout.createSequentialGroup()
                        .addComponent(SCENES_label_info2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SCENES_label_info3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane9)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SCENES_button_createnewscene)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SCENES_button_editscene)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(SCENES_button_deletescene)
                .addContainerGap())
        );

        tabbed_panel.addTab("Scenes", scenes_panel);

        Tick_LABEL_tick_version.setText("Tick version 2.0.0A1");

        button_options.setText("Options");
        button_options.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_optionsActionPerformed(evt);
            }
        });

        button_manageresources.setText("Manage Resources");
        button_manageresources.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_manageresourcesActionPerformed(evt);
            }
        });

        button_console.setText("Console");
        button_console.setEnabled(false);
        button_console.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_consoleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabbed_panel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(button_options, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_manageresources)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_console)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Tick_LABEL_tick_version)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbed_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Tick_LABEL_tick_version, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button_options)
                    .addComponent(button_manageresources)
                    .addComponent(button_console))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Function for letting know program which panel are focused on in the right moment
     * @param evt 
     */
    private void tabbed_panelStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbed_panelStateChanged
        actual_panel_index = tabbed_panel.getSelectedIndex();
        
        switch (actual_panel_index) {
            case 0:
            {
                try {
                    window_manager.reload_default_scene_tick();
                } catch (SQLException ex) {
                    new message_window(this,true,"Error: "+ex.toString());
                }
            }
                break;

            case 1:
            {
                try {
                    window_manager.reload_default_scene_list();
                } catch (SQLException ex) {
                    new message_window(this,true,"Error: "+ex.toString());
                }
            }
                break;

            case 2:
            {
                try {
                    window_manager.reload_default_scene_scene();
                } catch (SQLException ex) {
                    new message_window(this,true,"Error: "+ex.toString());
                }
            }
                break;

            default:
                break;
        }
    }//GEN-LAST:event_tabbed_panelStateChanged

    private void TICK_list_ticklistMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TICK_list_ticklistMouseClicked
        TICK_button_toclipboard.setText("To clipboard");
        //actual_choosen_element_index = TICK_list_ticklist.getSelectedIndex();
        actual_choosen_element_string = TICK_list_ticklist.getSelectedValue();
        if ( actual_choosen_element_string != null){
            String[] parts = actual_choosen_element_string.split(":");
            //System.out.println(parts[0]);
            TICK_list_selectedvalue = Integer.parseInt(parts[0]);
            try {
                window_manager.tick_list_clicked();
            } catch (SQLException ex) {
                new message_window(this,true,"Error: "+ex.toString());
            }
        }
    }//GEN-LAST:event_TICK_list_ticklistMouseClicked

    private void TICK_button_active_ticksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TICK_button_active_ticksActionPerformed
        if( TICK_button_active_ticks.getText().equals("Active Ticks")){
            try {
                window_manager.reload_archived_scene_tick();
            } catch (SQLException ex) {
                new message_window(this,true,"Error: "+ex.toString());
            }
        }
        else{
            try {
                window_manager.reload_default_scene_tick();
            } catch (SQLException ex) {
                new message_window(this,true,"Error: "+ex.toString());
            }
        }
    }//GEN-LAST:event_TICK_button_active_ticksActionPerformed

    private void TICK_button_addnewtickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TICK_button_addnewtickActionPerformed
        try {
            window_manager.buttonaction_addtick();
        } catch (SQLException ex) {
            new message_window(this,true,"Error: "+ex.toString());
        }
    }//GEN-LAST:event_TICK_button_addnewtickActionPerformed

    private void TICK_button_markdoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TICK_button_markdoneActionPerformed
        try {
            window_manager.buttonaction_markdone();
        } catch (SQLException ex) {
            new message_window(this,true,"Error: "+ex.toString());
        }
    }//GEN-LAST:event_TICK_button_markdoneActionPerformed

    private void TICK_button_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TICK_button_deleteActionPerformed
        try {
            window_manager.button_action_delete();
        } catch (SQLException ex) {
            new message_window(this,true,"Error: "+ex.toString());
        }
    }//GEN-LAST:event_TICK_button_deleteActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        window_manager.on_close();
    }//GEN-LAST:event_formWindowClosing

    private void TICK_button_toclipboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TICK_button_toclipboardActionPerformed
        try {
            if ( window_manager.button_action_toclipboard(TICK_list_selectedvalue)){
                TICK_button_toclipboard.setText("Copied!");
            }
            else{
                TICK_button_toclipboard.setText("Failed to copy!");
            }
        } catch (SQLException ex) {
            new message_window(this,true,"Error: "+ex.toString());
        }
    }//GEN-LAST:event_TICK_button_toclipboardActionPerformed

    private void TICK_button_edittickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TICK_button_edittickActionPerformed
        try {
            window_manager.buttonaction_edittick(TICK_list_selectedvalue);
        } catch (SQLException ex) {
            new message_window(this,true,"Error: "+ex.toString());
        }
    }//GEN-LAST:event_TICK_button_edittickActionPerformed

    private void TICK_button_sharetickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TICK_button_sharetickActionPerformed
        try {
            new GUI_share_window(this,true,database,TICK_list_selectedvalue);
        } catch (SQLException ex) {
            new message_window(this,true,"Error: "+ex.toString());
        }
    }//GEN-LAST:event_TICK_button_sharetickActionPerformed

    private void LIST_button_addnewlistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LIST_button_addnewlistActionPerformed
        if ( LIST_button_addnewlist.getText().equals("Add new list")){
            // open prompt to enter the name
            LIST_textfield_listname.setVisible(true);
            LIST_button_addnewlist.setText("Confirm");
        }
        else{
            // add new list to database and reload view
            if ( !LIST_textfield_listname.getText().equals("Enter the name")){
                // name of the list is correct
                Database_List dl = new Database_List(database);
                Tick_List tl = new Tick_List();
                tl.list_name = LIST_textfield_listname.getText();
                tl.owner_id = database.logged.owner_id;
                tl.list_date = new Date().toString();
                tl.wall_updater();
                try {
                    if ( dl.add_list(tl) ){
                        window_manager.reload_default_scene_list();
                    }
                    else{
                        LIST_textfield_listname.setText("Failed to add");
                    }
                } catch (SQLException ex) {
                    new message_window(this,true,"Error: "+ex.toString());
                }
            }
        }
    }//GEN-LAST:event_LIST_button_addnewlistActionPerformed

    private void LIST_listlistMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LIST_listlistMouseClicked
        if ( LIST_listlist.getSelectedValue()!= null){
            LIST_listlist_selectedvalue = Integer.parseInt(LIST_listlist.getSelectedValue().split(":")[0]);
            LIST_button_sendasemail.setText("Send as e-mail");
            LIST_button_copycontent.setText("Copy content");

            if ( LIST_listlist_selectedvalue != -1 ){
                Database_List dl = new Database_List(database);
                try {
                    Tick_List tl = dl.get_list(LIST_listlist_selectedvalue);

                    if ( tl != null ){
                        ArrayList<String> data_to_show  = dl.load_tick_data(tl.understand_id());
                        window_manager.load_list(LIST_listitems, data_to_show);
                    }
                } catch (SQLException ex) {
                    new message_window(this,true,"Error: "+ex.toString());
                }
            }
            LIST_button_copycontent.setEnabled(true);
            LIST_button_deletelist.setEnabled(true);
            LIST_button_edit.setEnabled(true);
            LIST_button_sendasemail.setEnabled(true);
            Database_Viewer dv = new Database_Viewer(database,database.logged,"list view");
            try {
                window_manager.load_textarea(dv.make_view(), LIST_textarea_listdet);
            } catch (SQLException ex) {
                new message_window(this,true,"Error: "+ex.toString());
            }
        }

    }//GEN-LAST:event_LIST_listlistMouseClicked

    private void LIST_button_copycontentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LIST_button_copycontentActionPerformed
        if ( LIST_listlist_selectedvalue != -1 ){
            Database_List dl = new Database_List(database);
            try {
                Tick_List tl = dl.get_list(LIST_listlist_selectedvalue);
                String content = ui.convert_array(tl.get_all_info(database));
                StringSelection stringSelection = new StringSelection(content);
                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                clipboard.setContents(stringSelection, null);
                LIST_button_copycontent.setText("Copied to clipboard");
            } catch (SQLException ex) {
                new message_window(this,true,"Error: "+ex.toString());
            }
            
        }
    }//GEN-LAST:event_LIST_button_copycontentActionPerformed

    private void LIST_button_sendasemailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LIST_button_sendasemailActionPerformed
        if ( LIST_button_sendasemail.getText().equals("Send as e-mail")){
            LIST_textfield_listname.setVisible(true);
            LIST_textfield_listname.setText("Enter e-mail address");
            LIST_button_sendasemail.setText("Confirm sending");
        }
        else{
            if ( !LIST_textfield_listname.getText().equals("Enter e-mail address") && LIST_textfield_listname.getText().contains("@") ){
                Database_Viewer dv = new Database_Viewer(database,database.logged,"list view");
                
                MailSender ms;
                try {
                    ms = new MailSender("List of things to do!",ui.convert_array(dv.make_view()),LIST_textfield_listname.getText());
                    ms.run();
                    LIST_button_sendasemail.setText("Sent");
                    LIST_textfield_listname.setVisible(false);
                } catch (SQLException ex) {
                    new message_window(this,true,"Error: "+ex.toString());
                } catch (MessagingException ex) {
                    new message_window(this,true,"Error: "+ex.toString());
                } catch (IOException ex) {
                    new message_window(this,true,"Error: "+ex.toString());
                }
            }
        }
        
    }//GEN-LAST:event_LIST_button_sendasemailActionPerformed

    private void LIST_button_deletelistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LIST_button_deletelistActionPerformed
        if ( LIST_button_deletelist.getText().equals("Delete")){
            if(LIST_listtick_selectedvalue != -1){
                LIST_button_deletelist.setText("Confirm");
            }
        }
        else{
            Database_List dl = new Database_List(database);
            
            try {
                if ( dl.delete_list(LIST_listtick_selectedvalue) ){
                    window_manager.reload_default_scene_list();
                }
            } catch (SQLException ex) {
                new message_window(this,true,"Error: "+ex.toString());
            }
            
        }
    }//GEN-LAST:event_LIST_button_deletelistActionPerformed

    private void LIST_button_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LIST_button_editActionPerformed
        if ( LIST_button_edit.getText().equals("Edit")){
            LIST_button_addnewlist.setEnabled(false);
            LIST_button_copycontent.setEnabled(false);
            LIST_button_deletelist.setEnabled(false);
            LIST_button_sendasemail.setEnabled(false);
            LIST_listlist.setEnabled(false);
            LIST_button_deleteticklist.setEnabled(true);
            LIST_button_addticktolist.setEnabled(true);
            LIST_button_edit.setText("Done");
        }
        else{
            try {
                window_manager.reload_default_scene_list();
            } catch (SQLException ex) {
                new message_window(this,true,"Error: "+ex.toString());
            }
        }
    }//GEN-LAST:event_LIST_button_editActionPerformed

    private void LIST_button_addticktolistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LIST_button_addticktolistActionPerformed
        if ( LIST_listtick_selectedvalue != -1){
            Database_List dl = new Database_List(database);
            int tick_index_add = LIST_listtick_selectedvalue;
            Tick_List tl;
            try {
                tl = dl.get_list(LIST_listlist_selectedvalue);
                try {
                    if ( !dl.check_tick_in_list(tick_index_add, LIST_listlist_selectedvalue)){
                        if ( dl.add_tick_to_list(tick_index_add, LIST_listlist_selectedvalue)){
                            tl = dl.get_list(LIST_listlist_selectedvalue);  //update object
                            ArrayList<String> data_to_show  = dl.load_tick_data(tl.understand_id());
                            window_manager.load_list(LIST_listitems, data_to_show);
                        }
                    } 
            } catch (SQLException ex) {
                new message_window(this,true,"Error: "+ex.toString());
            }
            } catch (SQLException ex) {
                new message_window(this,true,"Error: "+ex.toString());
            }
            
            
        }
    }//GEN-LAST:event_LIST_button_addticktolistActionPerformed

    private void LIST_listitemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LIST_listitemsMouseClicked
        LIST_listitems_selectedvalue = Integer.parseInt(LIST_listitems.getSelectedValue().toString().split(":")[0]);
    }//GEN-LAST:event_LIST_listitemsMouseClicked

    private void LIST_listtickMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LIST_listtickMouseClicked
        LIST_listtick_selectedvalue = Integer.parseInt(LIST_listtick.getSelectedValue().toString().split(":")[0]);
    }//GEN-LAST:event_LIST_listtickMouseClicked

    private void LIST_button_deleteticklistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LIST_button_deleteticklistActionPerformed
        if ( LIST_listitems_selectedvalue != -1 ){
            Database_List dl = new Database_List(database);
            int tick_index_add = LIST_listitems_selectedvalue;
            Tick_List tl;
            try {
                tl = dl.get_list(LIST_listlist_selectedvalue);
                try {
                    if ( dl.check_tick_in_list(tick_index_add, LIST_listlist_selectedvalue)){
                        if ( dl.delete_tick_from_list(tick_index_add, LIST_listlist_selectedvalue)){
                            tl = dl.get_list(LIST_listlist_selectedvalue);  //update object
                            ArrayList<String> data_to_show  = dl.load_tick_data(tl.understand_id());
                            window_manager.load_list(LIST_listitems, data_to_show);
                        }
                    } 
            } catch (SQLException ex) {
                new message_window(this,true,"Error: "+ex.toString());
            }
            } catch (SQLException ex) {
                new message_window(this,true,"Error: "+ex.toString());
            }
        }
    }//GEN-LAST:event_LIST_button_deleteticklistActionPerformed

    private void SCENES_listscenesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SCENES_listscenesMouseClicked
        if (SCENES_listscenes.getSelectedValue() != null){
            SCENES_list_selectedvalue = Integer.parseInt(SCENES_listscenes.getSelectedValue().split(":")[0]);
            SCENES_button_deletescene.setText("Delete scene");
            if ( SCENES_list_selectedvalue != -1 ){
                Database_Scene ds = new Database_Scene(database);
                try {
                    Tick_Scene ts = ds.get_scene_object(SCENES_list_selectedvalue);
                    SCENES_textarea_scenedata.setText(ui.convert_array(ts.get_lines_to_show()));

                    ArrayList<Tick_Tick> tick_from_scene = ts.return_tick_from_scene(database);
                    ArrayList<String> data_to_send = new ArrayList<>();
                    for(Tick_Tick object : tick_from_scene ){
                        data_to_send.add(object.simple_show());
                    }

                    window_manager.reload_JList(data_to_send, SCENES_listtick);

                } catch (SQLException ex) {
                    new message_window(this,true,"Error: "+ex.toString());
                }
            }
        }
        
    }//GEN-LAST:event_SCENES_listscenesMouseClicked

    private void SCENES_button_createnewsceneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SCENES_button_createnewsceneActionPerformed
        try {
            new GUI_addscene_window(this,true,database,0);
            window_manager.reload_default_scene_scene();
        } catch (SQLException ex) {
            new message_window(this,true,"Error: "+ex.toString());
        }
    }//GEN-LAST:event_SCENES_button_createnewsceneActionPerformed

    private void SCENES_button_editsceneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SCENES_button_editsceneActionPerformed
        if ( SCENES_list_selectedvalue != -1 ){
            try {
                new GUI_addscene_window(this,true,database,SCENES_list_selectedvalue);
                window_manager.reload_default_scene_scene();
            } catch (SQLException ex) {
                new message_window(this,true,"Error: "+ex.toString());
            }
        }
    }//GEN-LAST:event_SCENES_button_editsceneActionPerformed

    private void SCENES_button_deletesceneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SCENES_button_deletesceneActionPerformed
        if ( SCENES_list_selectedvalue != -1 ){
            Database_Garbage_Collector dgc = new Database_Garbage_Collector(database);
            try {
                if ( dgc.delete_scene(SCENES_list_selectedvalue) ){
                    window_manager.reload_default_scene_scene();
                    SCENES_button_deletescene.setText("Scene deleted");
                }
            } catch (SQLException ex) {
                new message_window(this,true,"Error: "+ex.toString());
            }
        }
    }//GEN-LAST:event_SCENES_button_deletesceneActionPerformed

    private void button_manageresourcesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_manageresourcesActionPerformed
        try {
            new GUI_manageresources_window(database);
        } catch (SQLException ex) {
            new message_window(this,true,"Error: "+ex.toString());
        }
    }//GEN-LAST:event_button_manageresourcesActionPerformed

    private void button_optionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_optionsActionPerformed
        new GUI_options_window(this,true,database,options);
    }//GEN-LAST:event_button_optionsActionPerformed

    private void button_consoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_consoleActionPerformed
        try {
            new GUI_console_window();
        } catch (InterruptedException ex) {
            new message_window(this,true,"Error: "+ex.toString());
        }
    }//GEN-LAST:event_button_consoleActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton LIST_button_addnewlist;
    public javax.swing.JButton LIST_button_addticktolist;
    public javax.swing.JButton LIST_button_copycontent;
    public javax.swing.JButton LIST_button_deletelist;
    public javax.swing.JButton LIST_button_deleteticklist;
    public javax.swing.JButton LIST_button_edit;
    public javax.swing.JButton LIST_button_sendasemail;
    private javax.swing.JLabel LIST_label_info1;
    private javax.swing.JLabel LIST_label_info2;
    public javax.swing.JList<String> LIST_listitems;
    public javax.swing.JList<String> LIST_listlist;
    public javax.swing.JList<String> LIST_listtick;
    public javax.swing.JTextArea LIST_textarea_listdet;
    public javax.swing.JTextField LIST_textfield_listname;
    public javax.swing.JButton SCENES_button_createnewscene;
    private javax.swing.JButton SCENES_button_deletescene;
    public javax.swing.JButton SCENES_button_editscene;
    private javax.swing.JLabel SCENES_label_info1;
    private javax.swing.JLabel SCENES_label_info2;
    private javax.swing.JLabel SCENES_label_info3;
    public javax.swing.JList<String> SCENES_listscenes;
    public javax.swing.JList<String> SCENES_listtick;
    public javax.swing.JTextArea SCENES_textarea_scenedata;
    public javax.swing.JButton TICK_button_active_ticks;
    public javax.swing.JButton TICK_button_addnewtick;
    public javax.swing.JButton TICK_button_delete;
    public javax.swing.JButton TICK_button_edittick;
    public javax.swing.JButton TICK_button_markdone;
    public javax.swing.JButton TICK_button_sharetick;
    private javax.swing.JButton TICK_button_toclipboard;
    public javax.swing.JButton TICK_button_unarchive;
    public javax.swing.JComboBox<String> TICK_combobox_filter;
    public javax.swing.JList<String> TICK_list_ticklist;
    public javax.swing.JTextArea TICK_textarea_tickdetails;
    private javax.swing.JLabel Tick_LABEL_tick_version;
    private javax.swing.JButton button_console;
    private javax.swing.JButton button_manageresources;
    private javax.swing.JButton button_options;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JPanel list_panel;
    public javax.swing.JPanel scenes_panel;
    private javax.swing.JTabbedPane tabbed_panel;
    private javax.swing.JPanel tick_panel;
    // End of variables declaration//GEN-END:variables
}
