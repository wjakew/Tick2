/*
by Jakub Wawak
kubawawak@gmail.com
all rights reserved
 */
package com.jakubwawak.gui;

import com.jakubwawak.database.Database;
import com.jakubwawak.database.Database_Garbage_Collector;
import com.jakubwawak.database.Database_Link;
import com.jakubwawak.tick2.Tick_HashtagT;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import com.jakubwawak.tick2.Tick_Tag;

/**
 *Main window for adding tags to hashtag table
 * @author jakubwawak
 */
public class GUI_addtags_window extends javax.swing.JDialog {

    /**
     * Creates new form GUI_addtags_window
     */
    Database database;
    int hashtag_table_id;
    
    String selected_list_alltags,selected_list_linkedtags;
    
    /**
     * Main constructor
     * @param parent
     * @param modal
     * @param database
     * @param hashtag_table_id
     * @throws SQLException
     * @throws SQLException 
     */
    public GUI_addtags_window(javax.swing.JDialog parent, boolean modal,Database database, int hashtag_table_id) throws SQLException, SQLException {
        super(parent, modal);
        this.database = database;
        this.hashtag_table_id = hashtag_table_id;
        selected_list_alltags = "";
        selected_list_linkedtags = "";
        initComponents();
        load_lists();
        setLocationRelativeTo(null);
        setVisible(true);
    }
    
    /**
     * Function for loading data to list components
     */
    void load_lists() throws SQLException{
        // loading all tags list
        ArrayList<Tick_Tag> data_toRet = database.get_all_tags();
        DefaultListModel dlm,dlm2;
        dlm = new DefaultListModel();
        dlm2 = new DefaultListModel();
        for(Tick_Tag tt : data_toRet){
            dlm.addElement(tt.get_glance());
        }
        // loading all tags in hashtag
        if ( hashtag_table_id != 1 ){
            
            // getting data from hashtag table
            ArrayList<Tick_Tag> data_toRet2 = database.get_hashtagtable_obj_byid(hashtag_table_id).get_all_tags(database);
            try{
                if ( data_toRet2.isEmpty() ){
                    dlm2.addElement("Empty");   
                }
                else{
                    for( Tick_Tag tt : data_toRet2 ){
                        dlm2.addElement(tt.get_glance());
                    }
                }
            }catch(NullPointerException e){
                database.log.add("Failed to show linked tags ","ADDTAGS WINDOW E!!!");
                dlm2.addElement("Failed to gather tags");
            }
        }
        else{
            dlm2.addElement("Error");
        }
        list_alltags.setModel(dlm);
        list_linkedtags.setModel(dlm2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        list_alltags = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        list_linkedtags = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        button_add = new javax.swing.JButton();
        button_remove = new javax.swing.JButton();
        button_addtag = new javax.swing.JButton();
        button_deletetag = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Hashtag Table Linker");

        list_alltags.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        list_alltags.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                list_alltagsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(list_alltags);

        jLabel1.setText("All tags:");

        list_linkedtags.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        list_linkedtags.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                list_linkedtagsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(list_linkedtags);

        jLabel2.setText("Tags linked to: ");

        button_add.setText(">>>>");
        button_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_addActionPerformed(evt);
            }
        });

        button_remove.setText("<<<<");
        button_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_removeActionPerformed(evt);
            }
        });

        button_addtag.setText("Add tag");
        button_addtag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_addtagActionPerformed(evt);
            }
        });

        button_deletetag.setText("Delete tag");
        button_deletetag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_deletetagActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(22, 22, 22))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(button_add, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                                .addComponent(button_remove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(button_addtag, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(101, 101, 101)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(button_deletetag, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2))
                .addGap(31, 31, 31))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(button_add, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(button_remove, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button_addtag)
                    .addComponent(button_deletetag))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_addtagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_addtagActionPerformed
        try {
            new GUI_datainput_universal_window(this,true,database,"tag",1);
            load_lists();
        } catch (SQLException ex) {
            new message_window_jdialog(this,true,"Error: "+ex.toString());
        }
    }//GEN-LAST:event_button_addtagActionPerformed

    private void button_deletetagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_deletetagActionPerformed
        try{
            int tag_id = Integer.parseInt(selected_list_alltags);
            
            Database_Garbage_Collector dgc = new Database_Garbage_Collector(database);
            
            if ( dgc.delete_tag(tag_id) ){
                load_lists();
            }
            else{
                button_deletetag.setText("Failed");
            }
        }catch(NumberFormatException | SQLException e){
            button_deletetag.setText("Failed");
        }
    }//GEN-LAST:event_button_deletetagActionPerformed

    private void list_alltagsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_list_alltagsMouseClicked
        if ( list_alltags.getSelectedValue().split(":").length > 0){
            selected_list_alltags = list_alltags.getSelectedValue().split(":")[0];
        }
        button_deletetag.setText("Delete tag");
        button_addtag.setText("Add tag");
        button_add.setText(">>>>");
    }//GEN-LAST:event_list_alltagsMouseClicked

    private void list_linkedtagsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_list_linkedtagsMouseClicked
        if ( list_linkedtags.getSelectedValue().split(":").length > 0){
            selected_list_linkedtags =list_linkedtags.getSelectedValue().split(":")[0];
        }
        button_remove.setText("<<<<");
    }//GEN-LAST:event_list_linkedtagsMouseClicked

    private void button_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_addActionPerformed
        try{
            int tag_id = Integer.parseInt(selected_list_alltags);
            
            Database_Link dl = new Database_Link(database);
            Tick_Tag tt = database.get_tag_obj_byid(tag_id);
            Tick_HashtagT tht = database.get_hashtagtable_obj_byid(hashtag_table_id);
            if ( dl.link_tag_hashtagT(tt, tht) ){
                button_add.setText("Done");
                load_lists();
            }
            else{
                button_add.setText("Fail");
            }
            
        }catch( NumberFormatException | SQLException e ){
            new message_window_jdialog(this,true,"Error: "+e.toString());
        }
    }//GEN-LAST:event_button_addActionPerformed

    private void button_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_removeActionPerformed
        try{
            int tag_id = Integer.parseInt(selected_list_linkedtags);
            
            Database_Garbage_Collector dgc = new Database_Garbage_Collector(database);
            
            if ( dgc.delete_tag(tag_id)){
                button_remove.setText("Done");
                load_lists();
            }
            else{
                button_remove.setText("Fail");
            }
            
        }catch(NumberFormatException | SQLException e) {
            new message_window_jdialog(this,true,"Error: "+e.toString());
        }
    }//GEN-LAST:event_button_removeActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_add;
    private javax.swing.JButton button_addtag;
    private javax.swing.JButton button_deletetag;
    private javax.swing.JButton button_remove;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> list_alltags;
    private javax.swing.JList<String> list_linkedtags;
    // End of variables declaration//GEN-END:variables
}
